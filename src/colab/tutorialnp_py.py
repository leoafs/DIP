# -*- coding: utf-8 -*-
"""TutorialNP.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AxLMWh-SYAg8MVPRJt-_roKSqlIi3IHb

**NumPy Array**
"""

import numpy as np

"""* How to create an empty and a full NumPy array?


"""

a = np.empty(shape=2)
print("Empty")
print(a)

b = np.full([3, 3], 55)
print("FULL")
print(b)

"""* Create a Numpy array filled with all zeros"""

zeros=np.zeros((5,5))
print(zeros)

"""* Create a Numpy array filled with all ones

"""

ones=np.ones((5,5))
print(ones)

"""* Check whether a Numpy array contains a specified row

"""

num = np.arange(10)
arr1 = np.reshape(num, [5, 2])
print("Original array:")
print(arr1)
print([0, 1] in arr1.tolist())
print([0,2] in arr1.tolist())
print([1,1] in arr1.tolist())

"""* How to Remove rows in Numpy array that contains non-numeric values?

"""

a = np.array([[10.5, 22.5, np.nan],
                  [41, 52.5, 1],[1 , 1 ,1]])
a[~np.isnan(a).any(axis=1)]
print(a[~np.isnan(a).any(axis=1)])

"""
* Remove single-dimensional entries from the shape of an array


"""

x = np.zeros((3, 1, 4,3,1,6))
print(np.squeeze(x).shape)

"""* Find the number of occurrences of a sequence in a NumPy array

"""

a = np.array([[2, 1, 9, 1], [8, 5, 9, 1],[9, 4, 9, 1],[4, 9, 4, 5],[9, 4, 9, 4]])
  
p= repr(a).count("9, 4")
  
print(p)

"""* Find the most frequent value in a NumPy array"""

x = np.array([1, 1, 1, 2, 3, 4, 2, 4, 3, 3, ])
print(x)
y = np.bincount(x)
m = max(y)  
print()
for i in range(len(y)):
    if y[i] == m:
        print(i, end=" ")

"""* Combining a one and a two-dimensional NumPy Array"""

Array1d = np.arange(5)
print(Array1d)
  
Array2d = np.arange(10).reshape(2,5)
print(Array2d)
for a, b in np.nditer([Array1d, Array2d]):
    print("%d:%d" % (a, b),)

"""* How to build an array of all combinations of two NumPy arrays?"""

array1 = np.array([3, 2])
array2 = np.array([1, 4])
  
print("Array1")
print(array1)
  
print("\nArray2")
print(array2)

comb_array = np.array(np.meshgrid(array_1, array_2)).T.reshape(-1, 2)
  
print("\nCombine array:")
print(comb_array)

"""* How to add a border around a NumPy array?"""

a = np.ones((4, 4))
print(a)

a = np.pad(a, pad_width=1, mode='constant',
               constant_values=0)
  
print(a)

"""* How to compare two NumPy arrays?

"""

a = np.array([[1,2],[3,4]])
b = np.array([[1,2],[3,4]])

comparison = b == b
print(comparison)
equal_arrays = comparison.all()
print(equal_arrays)

"""* How to check whether specified values are present in NumPy array?"""

a = np.array([[1, 4, 0],[3, 1, 4]])
print(2 in a)
print(0 in a)
print(6 in a)
print(50 in a)
print(4 in a)

"""* How to get all 2D diagonals of a 3D NumPy array?"""

arr = np.arange(3 * 4 * 4).reshape(3, 4, 4)
print(arr)

diag_arr = np.diagonal(arr, 
                       axis1 = 1,
                       axis2 = 2)
  
print("2d diagonal array:\n", 
      diag_arr)

"""* Flatten a Matrix in Python using NumPy"""

a=np.array([[1,2],[2,3]])
print(a.flatten())

"""* Flatten a 2d numpy array into 1d array"""

a=np.array([[1,2],[2,3],[1 , 1]])
print(a.flatten())

"""* Move axes of an array to new positions"""

a = np.zeros((1, 2, 3, 4))
  
b = np.moveaxis(arr, 0, -1).shape
  
print (b)

"""* Interchange two axes of an array"""

x = np.array([[1,2,3]])
print(x)
y =  np.swapaxes(x,0,1)
print(y)

"""* NumPy – Fibonacci Series using Binet Formula"""

a = np.arange(1, 11)
lengthA = len(a)
sqrtFive = np.sqrt(5)
alpha = (1 + sqrtFive) / 2
beta = (1 - sqrtFive) / 2
Fn = np.rint(((alpha ** a) - (beta ** a)) / (sqrtFive))
print("os primeiros {} valores da série{} . ".format(lengthA, Fn))

"""* Counts the number of non-zero values in the array"""

a = [[0, 1, 2, 0, 0], [0, 4, 0, 0, 1]]
  
b = np.count_nonzero(a)
  
print (b)

"""* Count the number of elements along a given axis

"""

a = np.array([[1, 22, 41, 41], [3, 6,47, 1]])
print(np.size(a))

"""* Trim the leading and/or trailing zeros from a 1-D array"""

a = np.array ((0, 0, 0, 7, 2, 3, 7, 4, 2, 0))
print(np.trim_zeros (a))

"""* Change data type of given numpy array"""

a = np.ones([2,2])
print(a)
print(a.dtype)
a=a.astype('int')
print(a)
print(a.dtype)

"""* Reverse a numpy array"""

a= np.array([1, 2, 3,4, 5])
  
print(a)
 
b = a[::-1]
  
print(b)

"""* How to make a NumPy array read-only?"""

a = np.zeros(11)
print("antes ")
print(a)
print( "depois")
a[0]=1
print(a)
print("antes")
a.flags.writeable = False
print(a)
print("depois")
a[1]=2

"""**Questions on NumPy Matrix**

* Get the maximum value from given matrix
"""

a=np.array([[1,2,5,4,3],[1,1,10,5,3]])
b=np.max(a)
print(b)

"""* Get the minimum value from given matrix"""

a=np.array([[-1,2,5,4,3],[1,1,10,5,3]])
b=np.min(a)
print(b)

"""* Find the number of rows and columns of a given matrix using NumPy"""

a=np.array([[10,11,12,13],[14,15,16,17],[18,19,20,21]])
print(a)
print(a.shape)

"""* Select the elements from a given matrix


"""



"""* Find the sum of values in a matrix"""

a=np.array([[1,2],[2,3]])
print('A')
print(a)
print("Soma")
b=a.sum()
print(b)

"""* Calculate the sum of the diagonal elements of a NumPy array"""

a=np.array([[1,2],[2,3]])
b=a.diagonal()
print(b)
print(b.sum())

"""* Adding and Subtracting Matrices in Python"""

a=np.array([[1,2],[2,3]])
b=np.array([[1,4],[1,3]])
print(a)
print(b)
c=a+b
d=a-b
print("sum")
print(c)
print("sub")
print(d)

"""* Ways to add row/columns in numpy array"""

a=np.array([[1,2],[2,3]])
print(a)
b=np.array([17,8])
print(b)
a=np.vstack([a,b])
print(a)

"""* Matrix Multiplication in NumPy"""

m1 = np.array([[1,2,3],[4,5,6],[7,8,9]])
m2 = np.array([[9,8,7,6],[5,4,3,3],[2,1,2,0]])

m3 = np.matmul(m1,m2)
print(m3)

"""* Get the eigen values of a matrix"""



"""* How to Calculate the determinant of a matrix using NumPy?"""



"""* How to inverse a matrix using NumPy"""



"""* How to count the frequency of unique values in NumPy array?"""



"""* Multiply matrices of complex numbers using NumPy in Python"""



"""* Compute the outer product of two given vectors using NumPy in Python"""



"""* Calculate inner, outer, and cross products of matrices and vectors using NumPy"""



"""* Compute the covariance matrix of two given NumPy arrays"""



"""* Convert covariance matrix to correlation matrix using Python"""



"""* Compute the Kronecker product of two mulitdimension NumPy arrays"""



"""* Convert the matrix into a list"""

